#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('socket-client:server')
var http = require('http')
var server = http.createServer(app)
const io = require('socket.io').listen(server)
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create socket server.
 */
const users = []
io.sockets.on('connection', socket => {
  // 创建用户链接
  socket.on('login', user => {
    if (isHave(user)) {
      socket.emit('nickExisted')
    } else {
      user.address = socket.handshake.address
      socket.userindex = users.length
      socket.user = user
      users.push(user)
      socket.emit('loginSuccess', user, users)
      io.sockets.emit('system', user, users, 'login')
    }
  })
  // 用户注销链接
  socket.on('disconnect', () => {
    if (socket.user != null) {
      users.splice(socket.userindex, 1)
      socket.broadcast.emit('system', socket.user, users, 'logout')
    }
  })
  // 新建消息
  socket.on('postMsg', (msg, color) => {
    socket.broadcast.emit('newMsg', socket.user, msg, color)
  })
  // 发送私信
  socket.on('privateMsg', function(id, msg) {
    console.log(socket.user)
    console.log(msg)
    socket.broadcast.to(id).emit('personMsg',socket.user,msg)
  })

  socket.on('img', (imgData, color) => {
    socket.broadcast.emit('newImg', socket.user, imgData, color)
  })
  //判断用户名是否存在
  function isHave(user) {
    var flag = false
    for (var i = 0; i < users.length; i++) {
      if (users[i].nickName == user.nickName) {
        flag = true
        break
      }
    }
    return flag
  }
})




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}